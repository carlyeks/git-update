#!/usr/bin/env python2
# -*- mode: python -*-

# Copyright 2013 Carl Yeksigian
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import git
import os
import re
from datetime import datetime, timedelta

# This is a simple script to update git repos when appropriate Files:
#   ~/.update.repos - This file describes the repos that need to be
#     updated, how frequently, and the next time to update
#   ~/.update.lastruns - This file tells when the repos were last
#     updated

# returns a timedelta based on parsing the frequency
regex = re.compile('((?P<years>\d+?)y)?((?P<months>\d+?)m)?((?P<weeks>\d+?)w)?((?P<days>\d+?)d)?((?P<hours>\d+?)h)?')
def parsefrequency(frequency):
    parts = regex.match(frequency)
    if not parts:
        timedelta(0)
    parts = parts.groupdict()
    days = 0
    weeks = 0
    hours = 0
    if "years" in parts:
        days = days + 365
    if "months" in parts:
        days = days + 30
    if "weeks" in parts:
        weeks = weeks + 1
    if "days" in parts:
        days = days + 1
    if "hours" in parts:
        hours = hours + 1
    return timedelta(weeks=weeks, days=days, hours=hours)

# Read all of the repos out of the update.repos directory
def repostorefresh():
    allRepos = {}
    with open(os.path.expanduser('~/.update.repos')) as repofile:
        for line in repofile:
            splits = line.split()
            if (len(splits) < 1):
                continue
            repo = splits[0]
            if (len(splits) > 1):
                frequency = splits[1]
            allRepos[repo] = {'frequency': parsefrequency(frequency), 'lastRun': None}

    if (os.path.exists(os.path.expanduser('~/.update.lastruns'))):
        with open(os.path.expanduser('~/.update.lastruns')) as lastruns:
            for line in lastruns:
                splits = line.split()
                if (len(splits) < 2):
                    continue
                repo = splits[0]
                lastrun = datetime.fromtimestamp(float(splits[1]))
                if repo in allRepos:
                    allRepos[repo]['lastRun'] = lastrun

    repos = []
    alreadyRun = []
    for repo, details in allRepos.items():
        if rerun(details):
            repos.append(repo)
        else:
            t = (repo, details['lastRun'])
            alreadyRun.append(t)
    return (repos, alreadyRun)

# Using the last run time, figure out if the repo requires a refresh.
def rerun(repo):
    if (repo['lastRun'] == None):
        return True
    return repo['lastRun'] + repo['frequency'] < datetime.now()

def update(repo):
    gitrepo = git.Repo(repo)
    if gitrepo.bare == True:
        return False
    if gitrepo.is_dirty():
        print('{0} is dirty. Please commit or reset.'.format(repo))
        return False
    gitrepo.remote().pull()
    return True

(repos, alreadyRun) = repostorefresh()
for repo in repos:
    if update(repo):
        t = (repo, datetime.now())
        alreadyRun.append(t)
    # otherwise, run it the next time we run update

with open(os.path.expanduser('~/.update.lastruns'), 'w') as lastruns:
    for (repo, time) in alreadyRun:
        lastruns.write("{0}\t{1}\n".format(repo, time.strftime('%s.%f')))

